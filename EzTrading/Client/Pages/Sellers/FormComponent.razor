@inject HttpClient _client

<EditForm Model="@seller" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@seller.Name" class="form-control" />
                <ValidationMessage For="@(() => seller.Name)" />
            </div>
        </div>

        <div class="form-group"
        <label>Contact: </label>
            <div>
                <InputText @bind-Value="@seller.Contact" class="form-control" />
                <ValidationMessage For="@(() => seller.Contact)" />
            </div>
        </div>

        <div class="form-group"
        <label>Password: </label>
            <div>
                <InputText @bind-Value="@seller.Password" class="form-control" />
                <ValidationMessage For="@(() => seller.Password)" />
            </div>
        </div>

    </fieldset>

        @if (!Disabled)
        { 
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
        }

    <BackToList Target="/seller/" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Seller seller { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }



    private IList<Customer> Customers;
    private IList<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
    }
}
