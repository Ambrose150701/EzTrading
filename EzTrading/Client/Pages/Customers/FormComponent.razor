@inject HttpClient _client

<EditForm Customer="@customer" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
   
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="customer.Name" class="form-control" />
                <ValidationMessage For="@(() => customer.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Address: </label>
            <div>
                <InputText @bind-Value="customer.Address" class="form-control" />
                <ValidationMessage For="@(() => customer.Address)" />
            </div>
        </div>

        <div class="form-group">
            <label>Contact: </label>
            <div>
                <InputText @bind-Value="customer.Contact" class="form-control" />
                <ValidationMessage For="@(() => customer.Contact)" />
            </div>
        </div>
        
        @if (!Disabled)
        { 
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
        }

    <BackToList Target="/customer/" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Customer customer { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }


    private IList<Cart> Carts;
    private IList<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Carts = await _client.GetFromJsonAsync<List<Cart>>($"{Endpoints.CartsEndpoint}");
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");

    }
}
