@page "/items/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>ITEMS</h3>
<a href="/items/create/" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Items
</a>
<br />
<br />
@if (Items == null)
{
    <div class="alert alert-info">Loading Items...</div>
}
else
{
    <table class="table table-responsive" id="ItemsTable">
        <thead>
            <tr>
                <th>Seller's' Name</th>
                <th> Item</th>
                <th>Price</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var Item in Items)
            {
                <tr>
                    <td>@Item.Seller.Name</td>
                    <td>@Item.Name</td>
                    <td>@Item.Price</td>
                    <td>
                        <a href="/items/view/@Item.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/items/edit/@Item.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Item.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Item> Items;

    protected async override Task OnInitializedAsync()
    {
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
    }
    async Task Delete(int ItemId)
    {
        var Item = Items.First(q => q.Id == ItemId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete { Item.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ItemsEndpoint}/{ItemId}");
            await OnInitializedAsync();
        }
    }

}